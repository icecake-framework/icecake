package html

import (
	"io"
	"reflect"
	"strconv"
	"strings"

	"github.com/icecake-framework/icecake/pkg/registry"
	"github.com/sunraylab/verbose"
)

// maxDEEP is the maximum HTML string unfolding levels
const maxDEEP int = 25

type ComposerMap map[string]any

type RenderingMeta struct {
	VirtualId string // virtual id allocated to a composer
	Deep      int    // deepness of the composer
	Parent    HTMLComposer

	sub ComposerMap // instantiated embedded sub-snippet if any.
}

func (rmeta *RenderingMeta) SetParent(parent HTMLComposer) (deep int) {
	rmeta.Parent = parent
	rmeta.Deep = 0
	if parent != nil {
		rmeta.Deep = parent.Meta().Deep + 1
	}
	return rmeta.Deep
}

// GenerateVirtualId generates a unique id for every rendering composer.
// The composer may not have a TagBuilder, so the Id is not necessarly the id attribute of the composer. The generated id pattern is:
//
//	`{{{parentid|orphan}.[cmpname.index]}|[cmpid]}`
//
// rules:
//   - if the rendering has a rendering parent, the virtual id starts with the parent's virtualid otherwise it's "orphan" followed by the component name
//   - if the rendering does not have a rendering parent, the virtual id is the given cmpid if not empty, otherwise it's "orphan"
//   - the dot "-" seperator is added followed by the cmpname if any
//
// - the cmpname is added
func (rmeta *RenderingMeta) GenerateVirtualId(cmpname string, cmpid string) string {
	prefix := "orphan"
	if rmeta.Parent != nil {
		prefix = rmeta.Parent.Meta().VirtualId
	}
	prefix += "."
	toporphan := strings.HasPrefix(prefix, "orphan.")

	body := cmpname
	if cmpid != "" {
		body = cmpid
		if toporphan {
			prefix = ""
		}
	}

	index := 0
	if rmeta.Parent != nil {
		index = len(rmeta.Parent.Meta().Embedded())
	} else {
		index, _ = registry.GetUniqueId(cmpname)
	}

	suffix := ""
	if cmpid == "" || toporphan {
		suffix = strconv.Itoa(index)
	}

	rmeta.VirtualId = prefix + body + suffix
	return rmeta.VirtualId
}

// Embed adds subcmp to the map of embedded components within the _parent.
// If a component with the same _id has already been embedded it's replaced.
// Usually the _id is the id of the html element.
func (rmeta *RenderingMeta) Embed(id string, subcmp HTMLComposer) {
	if rmeta.sub == nil {
		rmeta.sub = make(ComposerMap, 1)
	}
	rmeta.sub[id] = subcmp
	// verbose.Debug("embedded (%v) %q", reflect.TypeOf(subcmp).String(), id)
}

// Embedded returns the map of embedded components, keyed by their id.
func (rmeta RenderingMeta) Embedded() ComposerMap {
	if rmeta.sub == nil {
		rmeta.sub = make(ComposerMap, 1)
	}
	return rmeta.sub
}

type HTMLComposer interface {

	// Meta returns a reference to a RenderingMeta containing meta data of the rendering
	Meta() *RenderingMeta

	// RenderContent writes the HTML string corresponding to the content of the HTML element.
	// Return an error to stops the rendering process.
	RenderContent(out io.Writer) error
}

type HTMLTagComposer interface {
	TagBuilder
	HTMLComposer
}

// Render renders the HTML string of the snippet to out, including its tag element its properties and its content.
// Rendering the content can renders child-snippets recursively. This can be done maxDEEP times max to avoid infinite loop.
//
// If the snippet provides a tagname the output looks like this:
//
//	`<{tagname} id={xxx} name="{ick-tag}" [attributes]>[content]</tagname>`
//
// otherwise only the content is written:
//
// A snippet id can be setup up upfront (a) accessing any saved tag attribute within the snippet struct, or (b) within an html ick-tag attribute (for embedded snippet).
// Thes id will be lost if ther'e a parent, the snippet attributes will be overwritten with the unique id generated by the rendering process.
// Unique ids are generated by using the composer name (without "ick-" prefix) with a sequence number. sub-composer ids combine the id of the parent with the id of the sub-composer.
// if the component is not registered and so does't have a name, a global unique id is generated.
// This behaviour ensures that ids are uniques even for multiple instanciations of the same composer.
//
// snippet may have none id on request. noid snippet attribute must be set to true to render the composer without id.
// The special attribute noid can be defined within an ick-tag html or with attribute's methods.
//
// If the parent is not nil, the snippet is added to its embedded stack of sub-components.
//
// Returns rendering errors, typically with the writer, or if there's too many recursive rendering.
func Render(out io.Writer, parent HTMLComposer, cmp HTMLComposer) (err error) {

	// look for depth and ensure no infinite loop
	cmpdeep := cmp.Meta().SetParent(parent)
	if cmpdeep > maxDEEP {
		return verbose.Error("RenderSnippet", ErrTooManyRecursiveRendering)
	}

	// Get a name for the composer and set its name property
	// TODO: simplify with the tag name automattically generated with reflection
	var icktagname, cmpname string
	regentry := registry.LookupRegistryEntry(cmp)
	if regentry != nil {
		icktagname = regentry.TagName()
		cmpname = icktagname
		if left, has := strings.CutPrefix(icktagname, "ick-"); has {
			cmpname = left
		}
	} else {
		cmpname = reflect.TypeOf(cmp).Elem().Name()
		cmpname = strings.ToLower(cmpname)
		icktagname = "ick-" + cmpname
	}

	// build the tag
	cmptag, istagger := cmp.(TagBuilder)
	cmpid := ""
	autoid := false
	if istagger {
		tag := cmptag.Tag()
		if tag.AttributeMap == nil {
			tag.AttributeMap = make(AttributeMap)
		}
		cmptag.BuildTag(tag)

		// force property name
		if !tag.NoName {
			tag.SetAttribute("name", icktagname)
		}

		// get the id, may be empty
		if tag.BoolAttribute("autoid") {
			autoid = true // tag.RemoveAttribute("id")
		} else {
			cmpid = tag.Id()
		}
	}

	// generate the virtual id
	virtualid := cmp.Meta().GenerateVirtualId(cmpname, cmpid)
	if autoid {
		cmptag.Tag().SetId(virtualid)
	}

	// verbose information
	if verbose.IsOn {
		verbose.Printf(verbose.INFO, "rendering composer %v (%s) vid=%q --> id=%q\n", cmpdeep, reflect.TypeOf(cmp).String(), virtualid, cmpid)
	}

	// render openingtag
	if cmptag != nil {
		selfclosed, errtag := cmptag.Tag().RenderOpening(out)
		if selfclosed || errtag != nil {
			return errtag
		}
	}

	// Render the content
	err = cmp.RenderContent(out)
	if err != nil {
		return err
	}

	// Render closingtag
	if cmptag != nil {
		err = cmptag.Tag().RenderClosing(out)
	}

	// add it to the map of embedded components
	if err == nil && parent != nil {
		parent.Meta().Embed(virtualid, cmp)
	}

	return err
}
