package ickcore

// BareSnippet provides a Rendering MetataData and a Tag required by quite every custom snippet.
// It aims to be embedded into custom snippet.
type BareSnippet struct {
	meta RMetaData // Rendering MetaData.
	tag  Tag       // HTML Element Tag with its attributes.
}

// Clone clones the snippet, without the rendering metadata, nor the id
func (s *BareSnippet) Clone() *BareSnippet {
	c := new(BareSnippet)
	c.tag = *s.tag.Clone()
	c.tag.SetId("")
	return c
}

// Id Returns the id of the Snippet. Can be empty.
func (snippet *BareSnippet) RMeta() *RMetaData {
	return &snippet.meta
}

// // return a reference to the snippet's tag. Never nil.
// func (s *BareSnippet) Tag() *ICKTag {
// 	if s.tag.AttributeMap == nil {
// 		s.tag.AttributeMap = make(AttributeMap)
// 	}
// 	return &s.tag
// }

// func (s BareSnippet) Id() string {
// 	return s.Tag().Id()
// }

// func (s *BareSnippet) SetAttribute(aname string, value string) {
// 	s.Tag().SetAttribute(aname, value)
// }

// // The default rendering
// func (s BareSnippet) NeedRendering() bool {
// 	return s.tag.NeedRendering()
// }
